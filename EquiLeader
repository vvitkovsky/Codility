int solution(vector<int> &A) {
    // write your code in C++14 (g++ 6.2.0)
    auto n = A.size();
    int size = 0;
    
    int value = 0;
    for (size_t k = 0; k < n; ++k) {
        if (size == 0) {
            size++;
            value = A[k];
        }
        else {
            if (value != A[k]) {
                size--;
            }
            else {
                size++;
            }
        }
    }
    
    int candidate = -1;
    if (size > 0) {
        candidate = value;
    }
    
    int leader = -1;
    int count = 0;

    for (size_t k = 0; k < n; ++k) {
        if (A[k] == candidate) {
            count++;
        }
    }
    
    int equi_leaders = 0;
    if (count > (int)(n / 2)) {
        leader = candidate;
        
        int leaderCount = 0;
        for (size_t i = 0; i < n; ++i) {
            if (A[i] == leader) {
                leaderCount++;
            }
            int leadersInRightPart = count - leaderCount;
            if (leaderCount > (i + 1) / 2 && leadersInRightPart > (n - i - 1) / 2) {
                equi_leaders++;
            }
        }
    }
    return equi_leaders;
}
